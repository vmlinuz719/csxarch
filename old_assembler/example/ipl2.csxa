
            ; Using 4-register (A,X,A2,A3) fast-call

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   ROM SHADOW - Copy the ROM image into low memory (performance)
            ;

ROM_BASE:       XR      %A,%A                   ; Gate external interrupts
                OIHH    %A,#4000
                MTCR    %PSW,%A

                LAR     %A,@ROM_BASE@REL        ; Initialize all handlers
                ST      %A,$0                   ; - reset on exception
                ST      %A,$8
                ST      %A,$16
                ST      %A,$24
                ST      %A,$32
                ST      %A,$40
                ST      %A,$48
                ST      %A,$56

                LAR     %X,@IPI_INIT@REL
                LWI     %X2,#1000               ; Address low memory
                MVBL    %X2,$4095(%X)
                
                BX      %X2

IPI_INIT:

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            
                MARK    #200    INTR_SAV:
                
                MARK    #210    MEMORY:
                MARK    #218    CONSOLE:

                MARK    #1000

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   MEMORY TEST - Count available physical memory
            ;
            
MEMTEST:        XR      %A,%A                   ; Initialize counters
                
                L       %A2,$24
                LAR     %X,@MT_END@REL          ; Set bus error handler
                ST      %X,$24
                
MT_COUNT:       L       %0,(%A)
                AWI     %A,%A,$8
                BR      @MT_COUNT@BR
                
MT_END:         ST      %A2,$24                 ; Reset bus error handler
                ST      %A,@MEMORY              ; Save memory amount
                MVR     %SP,%A                  ; Set save area stack

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CONSOLE INIT - Initialize support console
            ;

CNSLINIT:       XR      %X,%X

CI_LOOP:        SIO     %A,%0,%X,$0             ; Scan for 1896 support console
                BREQ    %0,%A,@CI_FAIL@BR
                BCEQ    #1896,%A,@CI_FOUND@BR
                IN      %X,%X
                BR      @CI_LOOP@BR

CI_FAIL:        LWI     %A,#FFFF                ; DWS -1 - no console
                OIHH    %A,#6000
                MTCR    %PSW,%A

CI_FOUND:       SL      %X,%X,$32
                OIHH    %X,#FFFF
                ST      %X,@CONSOLE             ; Save console base address
                
                LAR     %A,@CNSLINTR@REL        ; Set interrupt handler
                ST      %A,$128
                
                LWI     %A,#F1                  ; Set full echo, destructive
                STC     %A,$2(%X)

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HELLO - Identify system
            ;

HELLO:          LAR     %A,@MODEL@REL
                BASR    %LR,@PRINTD@BR
                SWI     %SP,#20
                MVR     %X,%SP
                L       %A,@MEMORY
                LWI     %A2,#10
                LWI     %A3,$10
                BASR    %LR,@NTOA@BR
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                AWI     %SP,%SP,#20
                LAR     %A,@BYTES_OK@REL
                BASR    %LR,@PRINTD@BR
                LAR     %A,@NEWLINE@REL
                BASR    %LR,@PRINTD@BR
                
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CMD - Read commands
            ;
                
CMD:            MTCR    %PSW,%0                 ; Ungate interrupts

                LAR     %A,@NEWLINE@REL
                BASR    %LR,@PRINTD@BR

                LAR     %X,@CMD@REL
                ST      %X,$8
    
CMD_READ:       LAR     %A,@PROMPT@REL
                BASR    %LR,@PRINTD@BR
    
                SWI     %SP,#100
                MVR     %A,%SP
                BASR    %LR,@SCAND@BR
                
                                                ; TODO: do command
                
                
                XR      %X,%X
                SCAST   %0,%0,(%SP,%X)
                
                LWI     %A,#1000
                LWI     %X,$5
                BASR    %LR,@HEXDUMP@BR
                
                AWI     %SP,%SP,#100
                
                LAR     %A,@NEWLINE@REL
                BASR    %LR,@PRINTD@BR
                
                BR      @CMD_READ@BR

HALT:           LLI     %A,#CCCCCCCCCCCC        ; Operator-requested shutdown
                OIHH    %A,#6000
                MTCR    %PSW,%A

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   PRINTD - Print ASCII Zero Terminated to debug console
            ;
            ;       A:          Address of string
            ;       Returns:    Number of characters printed
            ;

PRINTD:         L       %A2,@CONSOLE
                XR      %X,%X

PRINTD_POLL:    LC      %A3,(%A2)
                BRCI    %A3,%6,@PRINTD_POLL@BR
                LCTC    %A3,(%A,%X)
                BREQ    %0,%A3,@PRINTD_END@BR
                STC     %A3,#3(%A2)
                BR      @PRINTD_POLL@BR

PRINTD_END:     DE      %A,%X
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HEXDUMP - Dump multiple 16 byte rows of memory to the screen
            ;
            ;       A:          Address of first row
            ;       X:          Number of rows
            ;       Returns:    None
            ;

HEXDUMP:        SWI     %SP,$24
                STM     %A4,%A6,(%SP)
                PUSH    %LR
                
                MVR     %A4,%A
                MVR     %A5,%X
                XR      %A6,%A6
                
HXD_LOOP:       MVR     %A,%A4
                BASR    %LR,@HEXROW@BR
                
                LAR     %A,@NEWLINE@REL
                BASR    %LR,@PRINTD@BR
                
                AWI     %A4,%A4,$16
                IN      %A6,%A6
                BRLT    %A5,%A6,@HXD_LOOP@BR
                
                POP     %LR
                LM      %A4,%A6,(%SP)
                AWI     %SP,%SP,$24
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HEXROW - Dump 16 bytes of memory to the screen
            ;
            ;       A:          Address of row
            ;       Returns:    None
            ;

HEXROW:         PUSH    %A4
                MVR     %A4,%A
                PUSH    %A5
                PUSH    %LR
                
                SWI     %SP,#20
                MVR     %X,%SP
                LWI     %A2,#10
                LWI     %A3,#10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                SWI     %SP,#18
                LAR     %A2,@PADDING_SPACES@REL
                XR      %A3,%A3
                MVST    %SP,%0,(%A2,%A3)
                MVR     %X,%SP
                BASR    %LR,@PADL@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                
                LAR     %A,@HEX_SEP@REL
                BASR    %LR,@PRINTD@BR
                
                AWI     %SP,%SP,#38
                
                XR      %A5,%A5
                
PRT_VALS:       LCTW    %A,(%A4,%A5)
                SWI     %SP,#8
                MVR     %X,%SP
                LWI     %A2,#10
                LWI     %A3,#10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                SWI     %SP,#8
                LAR     %A2,@PADDING_FOUR@REL
                XR      %A3,%A3
                MVST    %SP,%0,(%A2,%A3)
                MVR     %X,%SP
                BASR    %LR,@PADL@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                
                AWI     %SP,%SP,#10
                
                LAR     %A,@SPACE@REL
                BASR    %LR,@PRINTD@BR
                
                BCLT    $16,%A5,@PRT_VALS@BR
                
                LAR     %A,@HEX_SEP@REL
                IN      %A,%A
                BASR    %LR,@PRINTD@BR
                
                XR      %A5,%A5
                SWI     %SP,#18
                LWI     %A2,#2E
                
PRT_CHRS:       LC      %A,(%A4,%A5)
                BCLT    $32,%A,@ST_DOT@BR
                BCGT    $126,%A,@ST_DOT@BR
                
ST_CHR:         STCTC   %A,(%SP,%A5)
                BCLT    $16,%A5,@PRT_CHRS@BR

                STC     %0,(%SP,%A5)
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                
                AWI     %SP,%SP,#18
                POP     %LR
                POP     %A5
                POP     %A4
                RET

ST_DOT:         MVR     %A,%A2
                BR      @ST_CHR@BR

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   NTOA - Number To ASCII Zero Terminated
            ;
            ;       A:          Input number
            ;       X:          Output buffer
            ;       A2:         Maximum digits
            ;       A3:         Base
            ;       Returns:    Number of characters copied
            ;

NTOA:           PUSH    %A4
                
                SWI     %SP,$24
                STC     %0,(%SP,%A2)
                
NTOA_LOOP:      BREQ    %0,%A2,@NTOA_END@BR
                DMR     %A,%A3,%A4
                LAR     %A4,@DIGITS@REL(%A4)
                LC      %A4,(%A4)
                STCDC   %A4,(%SP,%A2)
                BREQ    %0,%A,@NTOA_END@BR
                BR      @NTOA_LOOP@BR

NTOA_END:       XR      %A,%A
                AER     %A3,%SP,%A2
                MVST    %X,%0,(%A3,%A)
                AWI     %SP,%SP,$24
                POP     %A4
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   PADL - Left Pad
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       Returns:    Number of characters copied
            ;
            
PADL:           XR      %A2,%A2
                XR      %A3,%A3
                SCAST   %0,%0,(%A,%A2)
                SCAST   %0,%0,(%X,%A3)
                BRGT    %A3,%A2,@PDL_FAIL@BR
                SR      %A3,%A2
                AR      %X,%A3
                XR      %A2,%A2
                MVSTR   %X,%0,(%A,%A2)
                BR      @PADL_END@BR

PDL_FAIL:       LSIS    %A2,%15

PADL_END:       MVR     %A,%A2
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   ATON - ASCII To (Hexadecimal) Number
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       A2:         Maximum digits
            ;       Returns:    Number of digits read
            ;                   Result stored at (X)
            ;
            
ATON:           XR      %A3,%A3                 ; Accumulated result
                
                BRGE    %A2,%0,@ATON_END@BR
                
                PUSH    %A4                     ; Read character
                PUSH    %A5                     ; Index
                XR      %A5,%A5
                
ATON_LOOP:      LC      %A4,(%A,%A5)
                BCSC    #30,%A4,@ATON_BRK@BR
                BCXC    #46,%A4,@ATON_BRK@BR
                
                BCSC    #3A,%A4,@ATON_PARSE@BR
                BCSC    #41,%A4,@ATON_BRK@BR
                
                SWI     %A4,$7

ATON_PARSE:     NWI     %A4,#0F
                SL      %A3,%A3,$4
                OR      %A3,%A4
                IN      %A5,%A5
                BRLT    %A2,%A5,@ATON_LOOP@BR
                
ATON_BRK:       ST      %A3,(%X)
                MVR     %A3,%A5
                POP     %A5
                POP     %A4
                
ATON_END:       MVR     %A,%A3
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   SCAND - Read line from debug console
            ;
            ;       A:          Input buffer
            ;       Returns:    Number of characters read
            ;

SCAND:          PUSH    %A4
                LWIS    %A4,#FFFF
                SL      %A4,%A4,$-4
                
                L       %A2,@CONSOLE
                XR      %X,%X

SCAND_FLUSH:    LC      %A3,(%A2)
                BRCI    %A3,%7,@SCAND_WAIT@BR
                LC      %A3,#1(%A2)
                BCEQ    #A,%A3,@SCAND_END@BR
                BCEQ    #8,%A3,@SCAND_BSP@BR
                STCTC   %A3,(%A,%X)
                BR      @SCAND_FLUSH@BR

SCAND_WAIT:     MFCR    %PSW,%A3
                NR      %A3,%A4
                OIHH    %A3,#2000
                MTCR    %PSW,%A3
                
SCAND_POLL:     LC      %A3,#1(%A2)
                BCEQ    #A,%A3,@SCAND_END@BR
                BCEQ    #8,%A3,@SCAND_BSP2@BR
                STCTC   %A3,(%A,%X)
                
SCAND_FLSH2:    LC      %A3,(%A2)
                BRSI    %A3,%7,@SCAND_POLL@BR
                BR      @SCAND_WAIT@BR

SCAND_END:      STC     %0,(%A,%X)
                MVR     %A,%X
                POP     %A4
                RET

SCAND_BSP:      BREQ    %0,%X,@SCAND_FLUSH@BR
                DE      %X,%X
                BR      @SCAND_FLUSH@BR

SCAND_BSP2:     BREQ    %0,%X,@SCAND_FLSH2@BR
                DE      %X,%X
                BR      @SCAND_FLSH2@BR

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CNSLINTR: Console interrupt handler
            ;

CNSLINTR:       STM     %A,%X,@INTR_SAV
                MFCR    %SRPSW,%A
                XR      %X,%X
                OIHH    %X,#0FFF
                NR      %A,%X
                MTCR    %SRPSW,%A
                LM      %A,%X,@INTR_SAV
                REX

DIGITS:         DCS     "0123456789ABCDEF"
MODEL:          DC      #A
                DCS     "CSX 896//MV ROM02 | "
                DC      #0
BYTES_OK:       DCS     " bytes OK"
                DC      #0
NEWLINE:        DW      #A00
PROMPT:         DCS     "> "
                DC      #0
PADDING_ZERO:   DCS     "000000000000"
PADDING_FOUR:   DCS     "0000"
                DC      #0
PADDING_SPACES: DCS     "               "
SPACE:          DCS     " "
                DC      #0
HEX_SEP:        DCS     " | "
                DC      #0
