
            ; Using 4-register (A,X,A2,A3) fast-call

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   ROM SHADOW - Copy the ROM image into low memory (performance)
            ;

ROM_BASE:       XR      %A,%A                   ; Gate external interrupts
                OIHH    %A,#4000
                MTCR    %PSW,%A

                XR      %A2,%A2
                LAR     %A,@ROM_BASE@REL        ; Initialize all handlers
VEC_INIT:       STCT    %A,(%0,%A2)             ; - reset on exception
                BCLE    $56,%A2,@VEC_INIT@BR

                LAR     %X,@IPI_INIT@REL
                LWI     %X2,#1000               ; Address low memory
                MVBL    %X2,$4095(%X)
                
                BX      %X2

IPI_INIT:

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            
                MARK    #200    INTR_SAV:
                
                MARK    #210    MEMORY:
                MARK    #218    MEMORY_DEC:
                MARK    #220    CONSOLE:

                MARK    #1000

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   MEMORY TEST - Count available physical memory
            ;
            
MEMTEST:        XR      %A,%A                   ; Initialize counters
                XR      %A3,%A3
                
                L       %A2,$24
                LAR     %X,@MT_END@REL          ; Set bus error handler
                ST      %X,$24
                
MT_COUNT:       L       %0,(%A)
                AWI     %A,%A,$8
                ADR     %A3,%0,%0,$8
                BR      @MT_COUNT@BR
                
MT_END:         ST      %A2,$24                 ; Reset bus error handler
                ST      %A,@MEMORY              ; Save memory amount
                ST      %A3,@MEMORY_DEC         ; Save memory amount, decimal
                MVR     %SP,%A                  ; Set save area stack

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CONSOLE INIT - Initialize support console
            ;

CNSLINIT:       XR      %X,%X

CI_LOOP:        SIO     %A,%0,%X,$0             ; Scan for 1896 support console
                BREQ    %0,%A,@CI_FAIL@BR
                BCEQ    #1896,%A,@CI_FOUND@BR
                IN      %X,%X
                BR      @CI_LOOP@BR

CI_FAIL:        LWI     %A,#FFFF                ; DWS -1 - no console
                OIHH    %A,#6000
                MTCR    %PSW,%A

CI_FOUND:       SL      %X,%X,$32
                OIHH    %X,#FFFF
                ST      %X,@CONSOLE             ; Save console base address
                
                LAR     %A,@CNSLINTR@REL        ; Set interrupt handler
                ST      %A,$128
                
                LWI     %A,#F1                  ; Set full echo, destructive
                STC     %A,$2(%X)

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HELLO - Identify system
            ;

HELLO:          LAR     %A,@MODEL@REL
                BASR    %LR,@PRINTD@BR
                SWI     %SP,#20
                MVR     %X,%SP
                L       %A,@MEMORY
                LWI     %A2,#10
                LWI     %A3,$10
                BASR    %LR,@NTOA@BR
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                AWI     %SP,%SP,#20
                LAR     %A,@BYTES_OK@REL
                BASR    %LR,@PRINTDLN@BR
                
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CMD - Read commands
            ;
                
CMD:            MTCR    %PSW,%0                 ; Ungate interrupts

                LAR     %A,@READY@REL
                BASR    %LR,@PRINTD@BR

                LAR     %X,@CMD@REL
                ST      %X,$8
    
                LLI     %A4,#08090A0B0C0D       ; Whitespace
                OIHH    %A4,#FFFF
                LHI     %X3,#10000              ; Initial cursor
                
                SWI     %SP,#200
                
CMD_LOOP:       LAR     %A,@PROMPT@REL
                BASR    %LR,@PRINTD@BR
                
                MVR     %A,%SP
                BASR    %LR,@SCAND@BR
                
                MVR     %X2,%SP                 ; Command index

CMD_PROC:       SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@CMD_LOOP@BR
                BCEQ    #24,%A,@CMD_STRCMD@BR
                BCEQ    #27,%A,@CMD_PKSTR@BR
                BCEQ    #2E,%A,@CMD_HEXDUMP@BR
                BCEQ    #2F,%A,@CMD_SET@BR
                BCEQ    #3D,%A,@CMD_POKE@BR
                BCEQ    #3F,%A,@CMD_TELL@BR
                BCEQ    #52,%A,@CMD_RUN@BR
                BCEQ    #58,%A,@HALT@BR
                BCEQ    #5C,%A,@CMD_CLS@BR
                BR      @UNKNOWN@BR
                
CMD_HEXDUMP:    IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@UNKNOWN@BR
                
                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                BASR    %LR,@ATON@BR
                BREQ    %0,%A,@UNKNOWN_1@BR
                
                AR      %X2,%A
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@HEX_NEXT@BR
                POP     %A
                LWIS    %A2,#FFF0
                NR      %A,%A2
                LSI     %X,%1
                BASR    %LR,@HEXDUMP@BR
                BR      @CMD_LOOP@BR
                
HEX_NEXT:       SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                BASR    %LR,@ATON@BR
                BREQ    %0,%A,@UNKNOWN_2@BR
                POP     %X
                POP     %A
                LWIS    %A2,#FFF0
                NR      %A,%A2
                BASR    %LR,@HEXDUMP@BR
                BR      @CMD_LOOP@BR

CMD_TELL:       IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@UNKNOWN@BR

                SWI     %SP,$24
                MVR     %X,%SP
                LWI     %A2,#10
                MVR     %A3,%A2
                MVR     %A,%X3
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTDLN@BR
                AWI     %SP,%SP,$24
                
                BR      @CMD_LOOP@BR
                
CMD_SET:        IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@UNKNOWN@BR

                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                BASR    %LR,@ATON@BR
                POP     %A2
                BREQ    %0,%A,@UNKNOWN@BR
                
                MVR     %X3,%A2
                AR      %X2,%A
                
                BR      @CMD_PROC@BR

CMD_POKE:       IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@UNKNOWN@BR

POKE_READ:      SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$2
                BASR    %LR,@ATON@BR
                POP     %A2
                BREQ    %0,%A,@UNKNOWN@BR
                
                AR      %X2,%A
                STCTC   %A2,(%0,%X3)
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@CMD_LOOP@BR
                
                BR      @POKE_READ@BR

CMD_PKSTR:      IN      %X2,%X2
                XR      %A2,%A2
                MVSTR   %X3,%0,(%X2,%A2)
                AR      %X3,%A2
                
                BR      @CMD_LOOP@BR

CMD_CLS:        IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@UNKNOWN@BR
                
                LAR     %A,@CLRSCR@REL
                BASR    %LR,@PRINTD@BR
                
                BR      @CMD_LOOP@BR

CMD_RUN:        IN      %X2,%X2
                SKST    %0,%A4,#20(%0,%X2)
                
                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                BASR    %LR,@ATON@BR
                POP     %A2
                BREQ    %0,%A,@UNKNOWN@BR
                
RUN_SAVE:       SWI     %SP,#78
                STM     %CT,%X4,(%SP)
                BASX    %LR,%A2
                MVR     %X3,%A
                LM      %CT,%X2,(%SP)
                L       %X4,#70(%SP)
                AWI     %SP,%SP,#78
                BR      @CMD_LOOP@BR

CMD_STRCMD:     IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@UNKNOWN@BR
                
                LAR     %X,@CMDTAB@REL
                
STRCMD_CMP:     XR      %A2,%A2
                XR      %A3,%A3
                SCAST   %0,%0,#20(%X,%A3)
                CST     %X2,%A3,(%X,%A2)
                LC      %A,(%X2,%A2)
                LC      %A3,(%X,%A2)
                BREQ    %A3,%A,@STRCMD_DO@BR
                
                AWI     %X,%X,$16
                L       %A,(%X)
                BRNE    %0,%A,@STRCMD_CMP@BR
                
                BR      @UNKNOWN@BR

STRCMD_DO:      AER     %X2,%X2,%A2,$1
                SKST    %0,%A4,#20(%0,%X2)
                MVR     %A,%X2
                L       %A2,$8(%X)
                BR      @RUN_SAVE@BR

UNKNOWN_2:      POP     %0
UNKNOWN_1:      POP     %0
UNKNOWN:        LAR     %A,@SYNTAX_ERR@REL
                BASR    %LR,@PRINTD@BR
                MVR     %A,%X2
                BASR    %LR,@PRINTDLN@BR
                BR      @CMD_LOOP@BR

HALT:           AWI     %SP,%SP,#200
                LLI     %A,#CCCCCCCCCCCC        ; Operator-requested shutdown
                OIHH    %A,#6000
                MTCR    %PSW,%A

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   PRINTD - Print ASCII Zero Terminated to debug console
            ;
            ;       A:          Address of string
            ;       Returns:    Number of characters printed
            ;

PRINTD:         L       %A2,@CONSOLE
                XR      %X,%X

PRINTD_POLL:    LC      %A3,(%A2)
                BRCI    %A3,%6,@PRINTD_POLL@BR
                LCTC    %A3,(%A,%X)
                BREQ    %0,%A3,@PRINTD_END@BR
                STC     %A3,#3(%A2)
                BR      @PRINTD_POLL@BR

PRINTD_END:     DE      %A,%X
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   PRINTDLN - Print to debug console followed by new line
            ;
            ;       A:          Address of string
            ;       Returns:    None
            ;

PRINTDLN:       PUSH    %LR

                BASR    %LR,@PRINTD@BR
                
                LAR     %A,@NEWLINE@REL
                BASR    %LR,@PRINTD@BR

                POP     %LR
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HEXDUMP - Dump multiple 16 byte rows of memory to the screen
            ;
            ;       A:          Address of first row
            ;       X:          Number of rows
            ;       Returns:    None
            ;

HEXDUMP:        SWI     %SP,$24
                STM     %A4,%A6,(%SP)
                PUSH    %LR
                
                MVR     %A4,%A
                MVR     %A5,%X
                XR      %A6,%A6
                
HXD_LOOP:       MVR     %A,%A4
                BASR    %LR,@HEXROW@BR
                
                LAR     %A,@NEWLINE@REL
                BASR    %LR,@PRINTD@BR
                
                AWI     %A4,%A4,$16
                IN      %A6,%A6
                BRLT    %A5,%A6,@HXD_LOOP@BR
                
                POP     %LR
                LM      %A4,%A6,(%SP)
                AWI     %SP,%SP,$24
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HEXROW - Dump 16 bytes of memory to the screen
            ;
            ;       A:          Address of row
            ;       Returns:    None
            ;

HEXROW:         PUSH    %A4
                MVR     %A4,%A
                PUSH    %A5
                PUSH    %LR
                
                SWI     %SP,#20
                MVR     %X,%SP
                LWI     %A2,#10
                LWI     %A3,#10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                SWI     %SP,#18
                LAR     %A2,@PADDING_SPACES@REL
                XR      %A3,%A3
                MVST    %SP,%0,(%A2,%A3)
                MVR     %X,%SP
                BASR    %LR,@PADL@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                
                LAR     %A,@HEX_SEP@REL
                BASR    %LR,@PRINTD@BR
                
                AWI     %SP,%SP,#38
                
                XR      %A5,%A5
                
PRT_VALS:       LCTW    %A,(%A4,%A5)
                SWI     %SP,#8
                MVR     %X,%SP
                LWI     %A2,#10
                LWI     %A3,#10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                SWI     %SP,#8
                LAR     %A2,@PADDING_FOUR@REL
                XR      %A3,%A3
                MVST    %SP,%0,(%A2,%A3)
                MVR     %X,%SP
                BASR    %LR,@PADL@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                
                AWI     %SP,%SP,#10
                
                LAR     %A,@SPACE@REL
                BASR    %LR,@PRINTD@BR
                
                BCLT    $16,%A5,@PRT_VALS@BR
                
                LAR     %A,@HEX_SEP@REL
                IN      %A,%A
                BASR    %LR,@PRINTD@BR
                
                XR      %A5,%A5
                SWI     %SP,#18
                LWI     %A2,#2E
                
PRT_CHRS:       LC      %A,(%A4,%A5)
                BCLT    $32,%A,@ST_DOT@BR
                BCGT    $126,%A,@ST_DOT@BR
                
ST_CHR:         STCTC   %A,(%SP,%A5)
                BCLT    $16,%A5,@PRT_CHRS@BR

                STC     %0,(%SP,%A5)
                MVR     %A,%SP
                BASR    %LR,@PRINTD@BR
                
                AWI     %SP,%SP,#18
                POP     %LR
                POP     %A5
                POP     %A4
                RET

ST_DOT:         MVR     %A,%A2
                BR      @ST_CHR@BR

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   NTOA - Number To ASCII Zero Terminated
            ;
            ;       A:          Input number
            ;       X:          Output buffer
            ;       A2:         Maximum digits
            ;       A3:         Base
            ;       Returns:    Number of characters copied
            ;

NTOA:           PUSH    %A4
                
                SWI     %SP,$24
                STC     %0,(%SP,%A2)
                
NTOA_LOOP:      BREQ    %0,%A2,@NTOA_END@BR
                DMR     %A,%A3,%A4
                LAR     %A4,@DIGITS@REL(%A4)
                LC      %A4,(%A4)
                STCDC   %A4,(%SP,%A2)
                BREQ    %0,%A,@NTOA_END@BR
                BR      @NTOA_LOOP@BR

NTOA_END:       XR      %A,%A
                AER     %A3,%SP,%A2
                MVST    %X,%0,(%A3,%A)
                AWI     %SP,%SP,$24
                POP     %A4
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   PADL - Left Pad
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       Returns:    Number of characters copied
            ;
            
PADL:           XR      %A2,%A2
                XR      %A3,%A3
                SCAST   %0,%0,(%A,%A2)
                SCAST   %0,%0,(%X,%A3)
                BRGT    %A3,%A2,@PDL_FAIL@BR
                SR      %A3,%A2
                AR      %X,%A3
                XR      %A2,%A2
                MVSTR   %X,%0,(%A,%A2)
                BR      @PADL_END@BR

PDL_FAIL:       LSIS    %A2,%15

PADL_END:       MVR     %A,%A2
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   ATON - ASCII To (Hexadecimal) Number
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       A2:         Maximum digits
            ;       Returns:    Number of digits read
            ;                   Result stored at (X)
            ;
            
ATON:           XR      %A3,%A3                 ; Accumulated result
                
                BRGE    %A2,%0,@ATON_END@BR
                
                PUSH    %A4                     ; Read character
                PUSH    %A5                     ; Index
                XR      %A5,%A5
                
ATON_LOOP:      LC      %A4,(%A,%A5)
                BCSC    #30,%A4,@ATON_BRK@BR
                BCXC    #46,%A4,@ATON_BRK@BR
                
                BCSC    #3A,%A4,@ATON_PARSE@BR
                BCSC    #41,%A4,@ATON_BRK@BR
                
                SWI     %A4,$7

ATON_PARSE:     NWI     %A4,#0F
                SL      %A3,%A3,$4
                OR      %A3,%A4
                IN      %A5,%A5
                BRLT    %A2,%A5,@ATON_LOOP@BR
                
ATON_BRK:       ST      %A3,(%X)
                MVR     %A3,%A5
                POP     %A5
                POP     %A4
                
ATON_END:       MVR     %A,%A3
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   SCAND - Read line from debug console
            ;
            ;       A:          Input buffer
            ;       Returns:    Number of characters read
            ;

SCAND:          PUSH    %A4
                LWIS    %A4,#FFFF
                SL      %A4,%A4,$-4
                
                L       %A2,@CONSOLE
                XR      %X,%X

SCAND_FLUSH:    LC      %A3,(%A2)
                BRCI    %A3,%7,@SCAND_WAIT@BR
                LC      %A3,#1(%A2)
                BCEQ    #A,%A3,@SCAND_END@BR
                BCEQ    #8,%A3,@SCAND_BSP@BR
                STCTC   %A3,(%A,%X)
                BR      @SCAND_FLUSH@BR

SCAND_WAIT:     MFCR    %PSW,%A3
                NR      %A3,%A4
                OIHH    %A3,#2000
                MTCR    %PSW,%A3
                
SCAND_POLL:     LC      %A3,#1(%A2)
                BCEQ    #A,%A3,@SCAND_END@BR
                BCEQ    #8,%A3,@SCAND_BSP2@BR
                STCTC   %A3,(%A,%X)
                
SCAND_FLSH2:    LC      %A3,(%A2)
                BRSI    %A3,%7,@SCAND_POLL@BR
                BR      @SCAND_WAIT@BR

SCAND_END:      STC     %0,(%A,%X)
                MVR     %A,%X
                POP     %A4
                RET

SCAND_BSP:      BREQ    %0,%X,@SCAND_FLUSH@BR
                DE      %X,%X
                BR      @SCAND_FLUSH@BR

SCAND_BSP2:     BREQ    %0,%X,@SCAND_FLSH2@BR
                DE      %X,%X
                BR      @SCAND_FLSH2@BR

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   IMPLEMENT: Not implemented
            ;

IMPLEMENT:      PUSH    %LR
                LAR     %A,@NO_IMPL@REL
                BASR    %LR,@PRINTDLN@BR
                POP     %LR
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   PCREDS: Roll the credits!
            ;

PCREDS:         PUSH    %LR
                LAR     %A,@CREDITS@REL
                BASR    %LR,@PRINTDLN@BR
                POP     %LR
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   IPL_SELECT: Select IPL loader
            ;

IPL_SELECT:     PUSH    %LR
                
                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                BASR    %LR,@ATON@BR
                POP     %A2
                BREQ    %0,%A,@UNKNOWN@BR
                
                SIO     %A3,%0,%A2,$0
                BREQ    %0,%A3,@IPL_NODEV@BR
                
                LAR     %X,@IPLTAB@REL
                PUSH    %A2
                
IPL_GETLDR:     L       %A2,(%X)
                BREQ    %0,%A2,@IPL_NOLDR@BR
                BRNE    %A3,%A2,@IPL_NEXT@BR
                
                PUSH    %X
                PUSH    %A3
                LAR     %A,@TRY_LOADER@REL
                BASR    %LR,@PRINTD@BR
                
                POP     %A
                SWI     %SP,#8
                MVR     %X,%SP
                LWI     %A2,#4
                LWI     %A3,#10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTDLN@BR
                
                AWI     %SP,%SP,#8
                
                POP     %X
                POP     %A2
                L       %A,$8(%X)
                BASX    %LR,%A
                
                BR      @IPL_EXIT@BR

IPL_NEXT:       AWI     %X,%X,$16
                BR      @IPL_GETLDR@BR
                
IPL_NOLDR:      POP     %0
                PUSH    %A3
                LAR     %A,@NO_LOADER@REL
                BASR    %LR,@PRINTD@BR
                
                POP     %A
                SWI     %SP,#8
                MVR     %X,%SP
                LWI     %A2,#4
                LWI     %A3,#10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTDLN@BR
                
                AWI     %SP,%SP,#8
                
                BR      @IPL_EXIT@BR

IPL_NODEV:      LAR     %A,@NO_DEVICE@REL
                BASR    %LR,@PRINTDLN@BR
                
IPL_EXIT:       POP     %LR
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   IPL_4010: 4010 Disk Controller IPL driver
            ;
            
IPL_4010:       PUSH    %LR

                XIO     %0,%1,%A2,$0
                
                SWI     %SP,$24
                
                LA      %A3,$16(%SP)
                ST      %A3,(%SP)
                ST      %0,(%A3)
                LHI     %A3,#01000000           ; TODO: LUN select
                STH     %A3,$8(%SP)
                XIO     %SP,%0,%A2,$0
                BASR    %A3,@I4010_DWAIT@BR
                
                L       %A,$16(%SP)
                BREQ    %0,%A,@I4010_NOMED@BR
                
                STH     %0,(%SP)
                LWI     %A3,#2000
                STH     %A3,$4(%SP)
                LHI     %A3,#04000000
                STH     %A3,$8(%SP)
                LWI     %A3,#0001
                STH     %A3,$12(%SP)
                XIO     %SP,%0,%A2,$0
                BASR    %A3,@I4010_DWAIT@BR
                
                LW      %A,$10(%SP)
                BRCI    %A,%0,@I4010_ERROR@BR

                LAR     %A,@IPL_GOOD@REL
                BASR    %LR,@PRINTDLN@BR
                
                LWI     %A,#2000
                BASX    %LR,%A

                BR      @I4010_EXIT@BR
                
I4010_ERROR:    PUSH    %A

                LAR     %A,@IPL_FAIL@REL
                BASR    %LR,@PRINTD@BR

                POP     %A
                SWI     %SP,#8
                MVR     %X,%SP
                LWI     %A2,#6
                LWI     %A3,$10
                BASR    %LR,@NTOA@BR
                
                MVR     %A,%SP
                BASR    %LR,@PRINTDLN@BR
                
                AWI     %SP,%SP,#8
                
                BR      @I4010_EXIT@BR
                
I4010_NOMED:    LAR     %A,@NO_MEDIA@REL
                BASR    %LR,@PRINTDLN@BR
                BR      @I4010_EXIT@BR
                
I4010_EXIT:     AWI     %SP,%SP,$24
                POP     %LR
                RET

I4010_DWAIT:    SIO     %A,%1,%A2,$0
                BRCI    %A,%1,@I4010_DWAIT@BR
                BX      %A3

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CNSLINTR: Console interrupt handler
            ;

CNSLINTR:       STM     %A,%X,@INTR_SAV
                MFCR    %SRPSW,%A
                XR      %X,%X
                OIHH    %X,#0FFF
                NR      %A,%X
                MTCR    %SRPSW,%A
                LM      %A,%X,@INTR_SAV
                REX

DIGITS:         DCS     "0123456789ABCDEF"
MODEL:          DC      #A
                DCS     "0001I ISC V/Series 680+ ROM02, "
                DC      #0
BYTES_OK:       DCS     " bytes OK"
                DC      #0
READY:          DCS     "0002I READY"
NEWLINE:        DW      #A00
PROMPT:         DCS     "> "
                DC      #0
SYNTAX_ERR:     DCS     "0003E Not understood: "
                DC      #0
NO_IMPL:        DCS     "0004E Not implemented"
                DC      #0
NO_DEVICE:      DCS     "0005E Device not present"
                DC      #0
NO_LOADER:      DCS     "0006E No IPL driver for device of type "
                DC      #0
TRY_LOADER:     DCS     "0007I Begin Initial Program Load (IPL) "
                DCS     "from device of type "
                DC      #0
NO_MEDIA:       DCS     "0008E Media not ready"
                DC      #0
IPL_FAIL:       DCS     "0009E IPL FAILED with error "
                DC      #0
IPL_GOOD:       DCS     "0010I IPL OK"
                DC      #0
PADDING_ZERO:   DCS     "000000000000"
PADDING_FOUR:   DCS     "0000"
                DC      #0
PADDING_SPACES: DCS     "               "
SPACE:          DCS     " "
                DC      #0
HEX_SEP:        DCS     " | "
                DC      #0
CLRSCR:         DC      #1B
                DCS     "[1;1H"
                DC      #1B
                DCS     "[2J"
                DC      #0

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CMDTAB: Command table
            ;

                ALIGN   #100

CMDTAB:         DCS     "IPL "
                ALIGN   #8
                DL      @IPL_SELECT
                
                DCS     "RESET "
                ALIGN   #8
                DL      #FFFF000000010000
                
                DCS     "CREDITS "
                ALIGN   #8
                DL      @PCREDS
                
                DL      #0

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   IPLTAB: Device model/IPL loader table
            ;

                ALIGN   #100
                
IPLTAB:         DL      #4010
                DL      @IPL_4010
                
                DL      #0

CREDITS:        DCS     "V/Series 680+ ROM (c) Integrated Specifications Corp."
                DC      #A
                DCS     "Hacked by github.com/vmlinuz719/"
                DC      #A
                DCS     "We made CSX, They fsck(8)ed it up"
                DC      #0

BANANA:         DCS     "BananaE"
