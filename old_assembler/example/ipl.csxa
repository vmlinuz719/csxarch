
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   IPL LOADER - Load the ROM image into RAM
            ;

START:          LAR     %X,@ROM_START@REL
                LWI     %X2,#2000
                MVR     %SP,%X2
                MVBL    %X2,$4095(%X)
                AWI     %X,%X,$4096
                AWI     %X2,%X2,$4096
                MVBL    %X2,$4095(%X)
                
                LHI     %X,@NMI_STUB
                ST      %X,$8(%0)
                LLIS    %X,#800000000000
                ST      %X,$16(%0)
                LHI     %X,@BUS_STUB
                ST      %X,$24(%0)
                LHI     %X,@ALIGN_STUB
                ST      %X,$32(%0)
                LHI     %X,@ILLEGAL_STUB
                ST      %X,$40(%0)
                LHI     %X,@PRIVILEGE_STUB
                ST      %X,$48(%0)
                LHI     %X,@DIVZERO_STUB
                ST      %X,$56(%0)
                LHI     %X,@CONINTR
                ST      %X,$128(%0)
                
                LHI     %X,@PAGEFAULT
                OWI     %X,#607
                LLIS    %A,#800000000000
                MTPM    %X,%A
                
                LHI     %X,#00000607
                LHI     %A,#00000000
                MTPM    %X,%A
                
                LHI     %X,#00001607
                LHI     %A,#00001000
                MTPM    %X,%A
                
                XR      %A,%A
                OIHH    %A,#1
                MTCR    %PSW,%A

                BX      %SP

ROM_START:

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MARK    #2000
                
INIT:           LAR     %A2,@CONSOLE@REL
                L       %X,(%A2)
                LWI     %A,#F1
                STC     %A,$2(%X)
                
                LAR     %A,@MODEL@REL
                BASR    %LR,@DPRINTAZ@BR
                
                LAR     %A,@NEWLCTE@REL
                BASR    %LR,@DPRINTAZ@BR
                
                LLI     %A4,#08090A0B0C0D   ; Whitespace
                OIHH    %A4,#FFFF
                LHI     %X3,#10000          ; Initial cursor
                
                SWI     %SP,$512
                
CMD_LOOP:       LAR     %A,@PROMPT@REL
                BASR    %LR,@DPRINTAZ@BR
                
                MVR     %A,%SP
                BASR    %LR,@DSCANAZ@BR
                
                MVR     %X2,%SP             ; Command index
                
CMD_PROC:       SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@CMD_LOOP@BR
                BCEQ    #2E,%A,@CMD_HEXDUMP@BR
                BCEQ    #52,%A,@CMD_RUN@BR
                BCEQ    #3F,%A,@CMD_TELL@BR
                BCEQ    #5C,%A,@CMD_CLS@BR
                BCEQ    #2F,%A,@CMD_SET@BR
                BCEQ    #3D,%A,@CMD_POKE@BR
                BCEQ    #27,%A,@CMD_PKSTR@BR
                BCEQ    #58,%A,@HALT@BR

                BR      @UNKNOWN@BR

CMD_HEXDUMP:    IN      %X2,%X2
                SKST    %0,%A4,#20(%0,%X2)
                
                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                SWI     %SP,$8
                STC     %A2,(%SP)
                BASR    %LR,@A2XNUM@BR
                AWI     %SP,%SP,$8
                POP     %A5
                BREQ    %0,%A,@UNKNOWN@BR
                
                AR      %X2,%A
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@HEX_NEXT@BR
                MVR     %A6,%A5
                BR      @HEX_GO@BR
                
HEX_NEXT:       SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                SWI     %SP,$8
                STC     %A2,(%SP)
                BASR    %LR,@A2XNUM@BR
                AWI     %SP,%SP,$8
                POP     %A2
                AER     %A6,%A2,%A5
                BREQ    %0,%A,@UNKNOWN@BR
                
                AR      %X2,%A
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@UNKNOWN@BR
                
HEX_GO:         MVR     %A,%A5
                MVR     %X,%A6
                BASR    %LR,@HEXDUMP@BR
                BR      @CMD_LOOP@BR

CMD_RUN:        IN      %X2,%X2
                SKST    %0,%A4,#20(%0,%X2)
                
                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                SWI     %SP,$8
                STC     %A2,(%SP)
                BASR    %LR,@A2XNUM@BR
                AWI     %SP,%SP,$8
                POP     %A5
                BREQ    %0,%A,@UNKNOWN@BR
                
                LAR     %CT,@CONSTANTS@REL
                BASX    %LR,%A5
                MVR     %X3,%A
                BR      @CMD_LOOP@BR

CMD_TELL:       IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@UNKNOWN@BR

                SWI     %SP,$24
                MVR     %X,%SP
                LWI     %A,#1010
                SWI     %SP,$8
                STW     %A,(%SP)
                MVR     %A,%X3
                BASR    %LR,@NUM2AZ@BR
                
                AWI     %SP,%SP,$8
                MVR     %A,%SP
                BASR    %LR,@DPRINTAZ@BR
                AWI     %SP,%SP,$24
                
                LAR     %A,@NEWLCTE@REL
                BASR    %LR,@DPRINTAZ@BR
                
                BR      @CMD_LOOP@BR

CMD_CLS:        IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BRNE    %0,%A,@UNKNOWN@BR
                
                LAR     %A,@CLRSCR@REL
                BASR    %LR,@DPRINTAZ@BR
                
                BR      @CMD_LOOP@BR

CMD_SET:        IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@UNKNOWN@BR

                SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$16
                SWI     %SP,$8
                STC     %A2,(%SP)
                BASR    %LR,@A2XNUM@BR
                AWI     %SP,%SP,$8
                POP     %A5
                BREQ    %0,%A,@UNKNOWN@BR
                
                MVR     %X3,%A5
                AR      %X2,%A
                
                BR      @CMD_PROC@BR

CMD_POKE:       IN      %X2,%X2
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@UNKNOWN@BR

POKE_READ:      SWI     %SP,$8
                MVR     %X,%SP
                MVR     %A,%X2
                LWI     %A2,$2
                SWI     %SP,$8
                STC     %A2,(%SP)
                BASR    %LR,@A2XNUM@BR
                AWI     %SP,%SP,$8
                POP     %A5
                BREQ    %0,%A,@UNKNOWN@BR
                
                AR      %X2,%A
                STCTC   %A5,(%0,%X3)
                SKST    %A,%A4,#20(%0,%X2)
                BREQ    %0,%A,@CMD_LOOP@BR
                
                BR      @POKE_READ@BR

CMD_PKSTR:      IN      %X2,%X2
                XR      %A2,%A2
                MVSTR   %X3,%0,(%X2,%A2)
                AR      %X3,%A2
                STCTC   %0,(%0,%X3)
                
                BR      @CMD_LOOP@BR
                
UNKNOWN:        LAR     %A,@SYNTAX_ERR@REL
                BASR    %LR,@DPRINTAZ@BR
                MVR     %A,%X2
                BASR    %LR,@DPRINTAZ@BR
                LAR     %A,@NEWLCTE@REL
                BASR    %LR,@DPRINTAZ@BR
                
                BR      @CMD_LOOP@BR
                
HALT:           LLI     %A,#0001CCCC0000
                OIHH    %A,#F001
                MTCR    %PSW,%A

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   DPRINTAZ - Print ASCII Zero Terminated to debug console
            ;
            ;   PROCEDURE DPRINTAZ (S &STRING) INTEGER
            ;
            ;       A:          Address of string
            ;       Returns:    Number of characters printed
            ;

DPRINTAZ:       LAR     %X,@CONSOLE@REL
                L       %A2,(%X)
                XR      %X,%X

DPRINTAZ_POLL:  LC      %A3,(%A2)
                BRCI    %A3,%6,@DPRINTAZ_POLL@BR
                LCTC    %A3,(%A, %X)
                BREQ    %0,%A3,@DPRINTAZ_END@BR
                STC     %A3,#3(%A2)
                BR      @DPRINTAZ_POLL@BR

DPRINTAZ_END:   DE      %A,%X
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   DSCANAZ - Read ASCII Zero Terminated from debug console
            ;
            ;   PROCEDURE DSCANAZ (S &STRING) INTEGER
            ;
            ;       A:          Address of buffer
            ;       Returns:    Number of characters read
            ;

DSCANAZ:        LAR     %X,@CONSOLE@REL
                L       %A2,(%X)
                XR      %X,%X

DSCANAZ_FLUSH:  LC      %A3,(%A2)
                BRCI    %A3,%7,@DSCANAZ_WAIT@BR
                LC      %A3,#1(%A2)
                BR      @DSCANAZ_FLUSH@BR

DSCANAZ_WAIT:   MFCR    %PSW,%A3
                OIHH    %A3,#2000
                MTCR    %PSW,%A3
                
DSCANAZ_POLL:   LC      %A3,(%A2)
                BRCI    %A3,%7,@DSCANAZ_POLL@BR
                LC      %A3,#1(%A2)
                BCEQ    #A,%A3,@DSCANAZ_END@BR
                BCEQ    #8,%A3,@DSCANAZ_BSP@BR
                STCTC   %A3,(%A, %X)
                BR      @DSCANAZ_WAIT@BR

DSCANAZ_END:    STC     %0,(%A, %X)
                MVR     %A,%X
                RET

DSCANAZ_BSP:    BREQ    %0,%X,@DSCANAZ_WAIT@BR
                DE      %X,%X
                BR      @DSCANAZ_WAIT@BR
            
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   NUM2AZ - Number To ASCII Zero Terminated
            ;
            ;       A:          Input number
            ;       X:          Output buffer
            ;       0(SP):      Maximum digits
            ;       1(SP):      Base
            ;       Returns:    Number of characters copied
            ;

NUM2AZ:         LC      %A2,$0(%SP)
                LC      %A3,$1(%SP)
                
                PUSH    %A4
                
                SWI     %SP,$24
                STC     %0,(%SP, %A2)
                
NUM2AZ_LOOP:    BREQ    %0,%A2,@NUM2AZ_END@BR
            ;   BREQ    %0,%A,@NUM2AZ_END@BR
                DE      %A2,%A2
                DMR     %A,%A3,%A4
                LAR     %A4,@DIGITS@REL(%A4)
                LC      %A4,(%A4)
                STC     %A4,(%SP, %A2)
                BR      @NUM2AZ_LOOP@BR

NUM2AZ_END:     XR      %A,%A
                AER     %A3,%SP,%A2
                MVST    %X,%0,(%A3, %A)
                AWI     %SP,%SP,$24
                POP     %A4
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   A2XNUM - ASCII To Hexadecimal Number
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       0(SP):      Maximum digits
            ;       Returns:    Number of digits read
            ;                   Result stored at (X)
            ;
            
A2XNUM:         LC      %A2,(%SP)
                XR      %A3,%A3                     ; Accumulated result
                
                BRGE    %A2,%0,@A2XNUM_END@BR
                
                PUSH    %A4                         ; Read character
                PUSH    %A5                         ; Index
                XR      %A5,%A5
                
A2XNUM_LOOP:    LC      %A4,(%A,%A5)
                BCSC    #30,%A4,@A2XNUM_BRK@BR
                BCXC    #46,%A4,@A2XNUM_BRK@BR
                
                BCSC    #3A,%A4,@A2XNUM_PARSE@BR
                BCSC    #41,%A4,@A2XNUM_BRK@BR
                
                SWI     %A4,$7

A2XNUM_PARSE:   NWI     %A4,#0F
                SL      %A3,%A3,$4
                OR      %A3,%A4
                IN      %A5,%A5
                BRLT    %A2,%A5,@A2XNUM_LOOP@BR
                
A2XNUM_BRK:     ST      %A3,(%X)
                MVR     %A3,%A5
                POP     %A5
                POP     %A4
                
A2XNUM_END:     MVR     %A,%A3
                RET
                
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   A2DNUM - ASCII To Decimal Number
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       0(SP):      Maximum digits
            ;       Returns:    Number of digits read
            ;                   Result stored at (X)
            ;
            
A2DNUM:         LC      %A2,(%SP)
                XR      %A3,%A3                     ; Accumulated result
                
                BRGE    %A2,%0,@A2DNUM_END@BR
                
                PUSH    %A4                         ; Read character
                PUSH    %A5                         ; Index
                PUSH    %A6                         ; First digit
                XR      %A5,%A5
                LC      %A6,(%A)
                BCNE    #2D,%A6,@A2DNUM_LOOP@BR
                IN      %A,%A
                
A2DNUM_LOOP:    LC      %A4,(%A,%A5)
                BCSC    #30,%A4,@A2DNUM_BRK@BR
                BCXC    #39,%A4,@A2DNUM_BRK@BR

A2DNUM_PARSE:   NWI     %A4,#0F
                SL      %A3,%A3,$4
                OR      %A3,%A4
                IN      %A5,%A5
                BRLT    %A2,%A5,@A2DNUM_LOOP@BR
                
A2DNUM_BRK:     BCNE    #2D,%A6,@A2DNUM_ST@BR
                NED     %A3,%A3
A2DNUM_ST:      ST      %A3,(%X)
                MVR     %A3,%A5
                POP     %A6
                POP     %A5
                POP     %A4
                
A2DNUM_END:     MVR     %A,%A3
                RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   CPYWDAZ - Copy First Word of String
            ;
            ;       A:          Input buffer
            ;       X:          Output buffer
            ;       Returns:    Index to read from next
            ;                   Result stored at (X)
            ;

CPYWDAZ:        LLI     %A3,#08090A0B0C0D
                XR      %A2,%A2
                SKST    %0,%A3,#20(%0,%A)
                SCAST   %0,%A3,#20(%A,%A2)
                XR      %A3,%A3
                MVSTR   %X,%A2,(%A,%A3)
                STC     %0,(%X,%A3)
                AR      %A,%A3
                RET
            
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;   HEXDUMP - Hexadecimal Dump
            ;
            ;       A:          Start address
            ;       X:          End address
            ;       Returns:    None
            ;
            
HEXDUMP:        BRSC    %A,%X,@HEXDUMP_END@BR

                PUSH    %LR
                PUSH    %A5
                PUSH    %A6
                PUSH    %A7

                LSI     %A2,%15
                I       %A2,%A2
                NR      %A,%A2
                NR      %X,%A2
                MVR     %A7,%X          ; End
                MVR     %A6,%A          ; Index
                
                SWI     %SP,$24
                
HEXDUMP_ROW:    XR      %A5,%A5
                MVR     %X,%SP
                LWI     %A,#1010
                SWI     %SP,$8
                STW     %A,(%SP)
                MVR     %A,%A6
                BASR    %LR,@NUM2AZ@BR
                
                AWI     %SP,%SP,$8
                PUSH    %A4
                PUSH    %A5
                LA      %A4,#10(%SP)
                
                MVR     %A,%A4
                POP     %A5
                POP     %A4
                BASR    %LR,@DPRINTAZ@BR
                
                LAR     %A,@SEPARATOR@REL
                BASR    %LR,@DPRINTAZ@BR
                
HEXDUMP_COL:    MVR     %X,%SP
                LWI     %A,#0410
                SWI     %SP,$8
                STW     %A,(%SP)
                LCTW    %A,(%A6,%A5)
                BASR    %LR,@NUM2AZ@BR
                
                AWI     %SP,%SP,$8
                MVR     %A,%SP
                BASR    %LR,@DPRINTAZ@BR
                
                LAR     %A,@SPACE@REL
                BASR    %LR,@DPRINTAZ@BR
                
                BCSC    #10,%A5,@HEXDUMP_COL@BR
                
                LAR     %A,@NEWLCTE@REL
                BASR    %LR,@DPRINTAZ@BR
                
                AR      %A6,%A5
                BRSC    %A7,%A6,@HEXDUMP_ROW@BR
                
                AWI     %SP,%SP,$24
                POP     %A7
                POP     %A6
                POP     %A5
                POP     %LR

HEXDUMP_END:    RET

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            
            ; TODO: Interrupt error messages

NMI_STUB:

BUS_STUB:

ALIGN_STUB:

ILLEGAL_STUB:

PRIVILEGE_STUB:

DIVZERO_STUB:

RESET:          LAR     %X,@CONSOLE_ROM@REL
                L       %A,(%X)
                BX      %A

CONINTR:        ST      %A,#200
                ST      %X,#208
                MFCR    %SRPSW,%A
                XR      %X,%X
                OIHH    %X,#0FFF
                NR      %A,%X
                MTCR    %SRPSW,%A
                L       %A,#200
                L       %X,#208
                REX
                
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                ALIGN   #10
                
ASCII2EBCDIC:   DWORD   #00010203372D2E2F DWORD #1605250B0C0D0E0F
                DWORD   #101112133C3D3226 DWORD #18193F271C1D1E1F
                DWORD   #405A7F7B5B6C507D DWORD #4D5D5C4E6B604B62
                DWORD   #F0F1F2F3F4F5F6F7 DWORD #F8F97A5E4C7E6E6F
                DWORD   #7CC1C2C3C4C5C6C7 DWORD #C8C9D1D2D3D4D5D6
                DWORD   #D7D8D9E2E3E4E5E6 DWORD #E7E8E9BAE0BBB06D
                DWORD   #7981828384858687 DWORD #8889919293949596
                DWORD   #979899A2A3A4A5A6 DWORD #A7A8A9C04FD0A107
                
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                ALIGN   #10

CONSOLE:        DWORD   #FFFF000000000000
CONSOLE_ROM:    DWORD   #FFFF000000010000

DISK:           DWORD   #FFFF000100000000

NEWLCTE:        DCHAR   #A
                DCHAR   #0

SPACE:          DCHAR   #20
                DCHAR   #0

SEPARATOR:      DCSTR   "    "
                DCHAR   #0

CLRSCR:         DCHAR   #1B
                DCSTR   "[1;1H"
                DCHAR   #1B
                DCSTR   "[2J"
                DCHAR   #0

MODEL:          DCSTR   "CSX 896//MV ROM01"
                DCHAR   #0

DIGITS:         DCSTR   "0123456789ABCDEF"

BUS_ERR:        DCHAR   #A
                DCSTR   "?? BUS @"
                DCHAR   #0

ALIGN_ERR:      DCHAR   #A
                DCSTR   "?? ALIGN @"
                DCHAR   #0

ILLEGAL_ERR:    DCHAR   #A
                DCSTR   "?? INSTR @"
                DCHAR   #0

PRIVILEGE_ERR:  DCHAR   #A
                DCSTR   "?? PRIVL @"
                DCHAR   #0

DIVZERO_ERR:    DCHAR   #A
                DCSTR   "?? MATH @"
                DCHAR   #0

NMI_MSG:        DCHAR   #A
                DCSTR   "?? INTR @"
                DCHAR   #0

PROMPT:         DCHAR   #A
                DCSTR   "*"
                DCHAR   #0

SYNTAX_ERR:     DCSTR   "? SYNTAX "
                DCHAR   #0

                ALIGN   $8

CONSTANTS:      DWORD   @DPRINTAZ
                DWORD   @DSCANAZ
                DWORD   @NUM2AZ
                DWORD   @A2XNUM
                DWORD   @A2DNUM
                DWORD   @CPYWDAZ
                DWORD   @HEXDUMP

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BENCH:          PUSH    %LR
                PUSH    %A4
            
                LWI     %A4,#FFF
            
BENCH_LOOP:     LWI     %A,$20
                BASR    %LR,@FIBN@BR
            
                DE      %A4,%A4
                BRNE    %0,%A4,@BENCH_LOOP@BR
            
                POP     %A4
                POP     %LR
                RET

FIBN:           BCLT    $2, %A, @E_FIBN@BR      ; RETURN N IF N < 2
            
                PUSH    %LR                     ; SAVE LR
                PUSH    %A4                     ; SAVE FOR N - 1
            
                DE      %A4, %A                 ; N - 1
                DE      %A, %A4                 ; NEXT N = N - 2
                BASR    %LR, @FIBN@BR           ; CALL FIBN(N - 2)
            
                ECR     %A, %A4                 ; XOR SWAP RESULT AND N - 1
                BASR    %LR, @FIBN@BR           ; CALL FIBN(N - 1)
            
                AR      %A, %A4                 ; SUM RESULTS
            
                POP     %A4                     ; RESTORE OLD A4
                POP     %LR                     ; RESTORE OLD LR

E_FIBN:         RET                             ; END

BSWP_TEST:      L       %A,(%X3)
                BSWP    %A,%A
                ST      %A,(%X3)
                RET

EBCDIC_TEST:    MVR     %A,%X3
                LAR     %X,@ASCII2EBCDIC@REL
                XR      %A3,%A3
                XLTST   %A,%X,(%A,%A3)
                MVR     %A,%A3
                RET

LOCK_TEST:      LHI     %A,#DEADBEEF            ; PRETEND THIS IS THE THREAD ID
SPIN_0:         BCASR   %A,%0,(%X3),@LK_DONE@BR ; "WAIT"
                BR      @SPIN_0@BR

UNLOCK_TEST:    LHI     %A,#DEADBEEF            ; PRETEND THIS IS THE THREAD ID
SPIN_1:         BCASR   %0,%A,(%X3),@LK_DONE@BR ; "WAIT"
                BR      @SPIN_1@BR

LK_DONE:        RET

DISK_TEST:      LAR     %A,@DISK@REL
                L       %X,(%A)
                ST      %X3,(%X)
                RET

DECIMAL_TEST:   LSI     %A2,%8
                XR      %X,%X
                L       %A,(%X3)
                
DEC_ADD_LOOP:   AR      %X,%A2
                L       %A3,(%X3,%X)
                BREQ    %0,%A3,@DEC_SUB_LOOP@BR
                ADR     %A,%A3
                BR      @DEC_ADD_LOOP@BR

DEC_SUB_LOOP:   AR      %X,%A2
                L       %A3,(%X3,%X)
                BREQ    %0,%A3,@DEC_END@BR
                SDR     %A,%A3
                BR      @DEC_SUB_LOOP@BR

DEC_END:        RET

KF_BENCH:       PUSH    %LR
                PUSH    %A4
            
                LWI     %A4,#FFFF
                MVR     %A,%X3
            
KF_BNC_LOOP:    BASR    %LR,@KECCAKF@BR
            
                DE      %A4,%A4
                BRNE    %0,%A4,@KF_BNC_LOOP@BR
            
                POP     %A4
                POP     %LR
                RET

                ALIGN   #10

RNDC:           DWORD   #0000000000000001
                DWORD   #0000000000008082
                DWORD   #800000000000808A
                DWORD   #8000000080008000
                DWORD   #000000000000808B
                DWORD   #0000000080000001
                DWORD   #8000000080008081
                DWORD   #8000000000008009
                DWORD   #000000000000008A
                DWORD   #0000000000000088
                DWORD   #0000000080008009
                DWORD   #000000008000000A
                DWORD   #000000008000808B
                DWORD   #800000000000008B
                DWORD   #8000000000008089
                DWORD   #8000000000008003
                DWORD   #8000000000008002
                DWORD   #8000000000000080
                DWORD   #000000000000800A
                DWORD   #800000008000000A
                DWORD   #8000000080008081
                DWORD   #8000000000008080
                DWORD   #0000000080000001
                DWORD   #8000000080008008

ROTC:           DCHAR   $1
                DCHAR   $3
                DCHAR   $6
                DCHAR   $10
                DCHAR   $15
                DCHAR   $21
                DCHAR   $28
                DCHAR   $36
                DCHAR   $45
                DCHAR   $55
                DCHAR   $2
                DCHAR   $14
                DCHAR   $27
                DCHAR   $41
                DCHAR   $56
                DCHAR   $8
                DCHAR   $25
                DCHAR   $43
                DCHAR   $62
                DCHAR   $18
                DCHAR   $39
                DCHAR   $61
                DCHAR   $20
                DCHAR   $44

PILN:           DCHAR   $10
                DCHAR   $7
                DCHAR   $11
                DCHAR   $17
                DCHAR   $18
                DCHAR   $3
                DCHAR   $5
                DCHAR   $16
                DCHAR   $8
                DCHAR   $21
                DCHAR   $24
                DCHAR   $4
                DCHAR   $15
                DCHAR   $23
                DCHAR   $19
                DCHAR   $13
                DCHAR   $12
                DCHAR   $2
                DCHAR   $20
                DCHAR   $14
                DCHAR   $22
                DCHAR   $9
                DCHAR   $6
                DCHAR   $1                

                ; KECCAKF - A: u64[25] st

KECCAKF:        SWI     %SP,$72                 ; u64[5] bc
                STM     %A4,%A7,$40(%SP)        ; i, j, r, t
                
                XR      %A6,%A6

KF_ROUND:       XR      %A4,%A4

KF_THETA_1:     L       %A2,(%A,%A4)
                X       %A2,$40(%A,%A4)
                X       %A2,$80(%A,%A4)
                X       %A2,$120(%A,%A4)
                X       %A2,$160(%A,%A4)
                STCT    %A2,(%SP,%A4)
                BCLT    $40,%A4,@KF_THETA_1@BR
                
                XR      %A4,%A4

KF_THETA_2:     IN      %A2,%A4
                DMR     %A2,%0,%A2,$5
                SL      %A2,%A2,$3
                L       %A3,(%SP,%A2)
                SLS     %X,%A3
                SL      %A7,%A3,$-63
                OR      %A7,%X
                
                AWI     %A2,%A4,$4
                DMR     %A2,%0,%A2,$5
                SL      %A2,%A2,$3
                L       %A3,(%SP,%A2)
                XR      %A7,%A3
                
                XR      %A5,%A5
                SL      %A3,%A4,$3
                AER     %X,%A,%A3

KF_THETA_2I:    MVR     %A2,%A7
                X       %A2,(%X,%A5)
                ST      %A2,(%X,%A5)
                AWI     %A5,%A5,$40
                BCLT    $200,%A5,@KF_THETA_2I@BR
                
                IN      %A4,%A4
                BCLT    $5,%A4,@KF_THETA_2@BR

                L       %A7,$8(%A)
                XR      %A4,%A4
                
KF_RHO_PI:      LAR     %X,@PILN@REL
                LC      %A5,(%A4,%X)
                
                SL      %A2,%A5,$3
                L       %A3,(%A,%A2)
                ST      %A3,(%SP)
                
                MVR     %A2,%A7
                MVR     %A3,%A7
                LAR     %X,@ROTC@REL
                LCTC    %A7,(%X,%A4)
                LWI     %X,$64
                SR      %X,%A7
                SLR     %A2,%A7
                SRR     %A3,%X
                OR      %A2,%A3
                SL      %X,%A5,$3
                ST      %A2,(%A,%X)
                
                L       %A7,(%SP)
                
                BCLT    $24,%A4,@KF_RHO_PI@BR
                
                XR      %A5, %A5

KF_CHI:         XR      %A4, %A4

KF_CH1:         LA      %X,(%A,%A5)
                L       %A3,(%X,%A4)
                STCT    %A3,(%SP,%A4)
                BCLT    $40,%A4,@KF_CH1@BR

                XR      %A4, %A4

KF_CH2:         IN      %A2,%A4
                DMR     %A2,%0,%A2,$5
                SL      %A3,%A2,$3
                L       %A2,(%SP,%A3)
                I       %A7,%A2
                AWI     %A2,%A4,$2
                DMR     %A2,%0,%A2,$5
                SL      %A3,%A2,$3
                N       %A7,(%SP,%A3)
                LA      %X,(%A,%A5)
                SL      %A2,%A4,$3
                X       %A7,(%X,%A2)
                ST      %A7,(%X,%A2)
                IN      %A4,%A4
                BCLT    $5,%A4,@KF_CH2@BR

                AWI     %A5,%A5,$40
                BCLT    $200,%A5,@KF_CHI@BR

                LAR     %X,@RNDC@REL
                LCT     %A3,(%X,%A6)
                X       %A3,(%A)
                ST      %A3,(%A)
                BCLT    $192,%A6,@KF_ROUND@BR    
                
                LM      %A4,%A7,$40(%SP)
                AWI     %SP,%SP,$72
                RET

                ALIGN   $4096

PAGEFAULT:      ST      %A,#210
                ST      %X,#218
                MFCR    %EADDR,%A
                LWIS    %X,#F000
                NR      %A,%X
                ST      %A2,#220
                MVR     %X,%A
                ST      %A3,#228
                LWI     %A2,#FFFF
                LSI     %A3,%8
                SL      %A2,%A2,$48
                ORGE    %X,%A2,%X,%X,%A3
                L       %A3,#228
                L       %A2,#220
                OWI     %A,#1
                OWI     %X,#603
                MTPM    %X,%A
                L       %A,#210
                L       %X,#218
                REX
                