            origin  0x10000

ltext:

ipl:        ldis    a0,ltext@h          ; establish addressability
            or      ct,a0,0,ltext@l
            
            ldca    a1,ct,early_intr@ltext
            mtcr    a1,ia

            xor     p0,p0,p0

scan_main:  ldq     0,p0
            add     p0,p0,0,8
            br      scan_main

            ldq     a0,ct,base0@ltext   ; load identity-mapped segment
            ldq     a1,ct,desc0@ltext
            mtcr    a0,b0
            mtcr    a1,d0
            
            ldq     a2,ct,base8@ltext   ; load supervisor segments
            ldq     a3,ct,desc8@ltext
            mtcr    a2,b8
            mtcr    a3,d8
            ldq     a0,ct,base9@ltext
            ldq     a1,ct,desc9@ltext
            ldq     a2,ct,basea@ltext
            ldq     a3,ct,desca@ltext
            mtcr    a0,b9
            mtcr    a1,d9
            mtcr    a2,b10
            mtcr    a3,d10
            
            mfcr    a0,psq              ; enable address translation
            ldi     a1,64
            mtcr    a0,a1,psq
            
            ldcas   ct,4,0              ; set up and enter program
            mov     sp,0
            jmp     ct,start

early_intr: zero    384

early_berr: rex     2

            align   0x10
            
base0:      dq      0x0                 ; storage area
desc0:      dq      0x0FFFFFFFFFFFFF00  ; XW, max size

base8:      dq      text                ; program segment
desc8:      dq      0xFE00              ; X, 64K

base9:      dq      0x0                 ; stack segment
desc9:      dq      0xFD00              ; W, 64K

basea:      dq      0xFFFF000000000000  ; I/O area
desca:      dq      0x0000FFFFFFFFFD18  ; WIC, I/O size

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

            align   0x400
            
text:       origin  0x0

start:      ldat    a4,ct,top_text@start
            ldi     a0,0x7FF000
            and     a1,a4,a0
            ldca    x0,a1,0x1000        ; 4k-aligned end of reserved area
            mov     x1,p0               ; end of physical memory
            
            shl     x2,x1,0,-12         ; number of 4k blocks
            
            shl     x3,x2,0,-3          ; number of bitmap bytes
            and     a0,x2,0,7
            add     a1,x3,0,1
            movne   x3,a0,a1            ; increment if not even multiple
            
            shl     x4,x3,0,-10         ; number of bitmap pages
            ldi     a2,0x3FF
            and     a0,x3,a2
            add     a1,x4,0,1           ; increment if not even multiple
            movne   x4,a0,a1
            
            shl     a0,x4,0,10
            mcom    a1,a2
            dec     a0
            and     a2,a0,a1
            or      a3,a2,0,0x100       ; segment descriptor for bitmap
            mtcr    a3,d11
            mtcr    x0,b11
            
            shl     x5,x0,0,-12         ; number of bits to reserve at start
            xor     x3,x3,x3            ; loop counter
            
bmp_rs_low: ldcas   p0,7,0              ; address of bitmap
            mov     p1,x3               ; bit to set
            ldi     p2,1                ; set bit
            inc     x3
            call    set_bit
            sub     a0,x5,x3
            bgz     a0,bmp_rs_low
            
            mov     x5,x2               ; high water mark
            
bmp_rs_mid: ldcas   p0,7,0              ; address of bitmap
            mov     p1,x3               ; bit to set
            xor     p2,p2,p2            ; clear bit
            inc     x3
            call    set_bit
            sub     a0,x5,x3
            bgz     a0,bmp_rs_mid
            
            shl     x5,x4,0,13          ; total bits in bitmap
            sub     a0,x5,x3            ; pages * 1024 * 8
            bez     a0,bmp_r_done       ; we are done if nothing left

bmp_rs_end: ldcas   p0,7,0              ; address of bitmap
            mov     p1,x3               ; bit to set
            ldi     p2,1                ; set bit
            inc     x3
            call    set_bit
            sub     a0,x5,x3
            bgz     a0,bmp_rs_end

bmp_r_done: xor     x0,x0,x0            ; total usable memory
            xor     x3,x3,x3            ; loop counter
            
count_pg:   ldcas   p0,7,0
            mov     p1,x3
            call    get_bit
            ldca    a0,x0,0x1000
            moveq   x0,rv,a0
            inc     x3
            sub     a0,x5,x3
            bgz     a0,count_pg

init_intr:  ldca    a3,ct,intr@start
            mtcr    a3,ia
            mfcr    a1,psq
            or      a1,a1,0,1
            mtcr    a1,psq
            ldi     a2,-1
            mtcr    a2,eim

init_cons:  ldi     a0,0x101            ; console on channel 0x101
            ldi     a2,0xF7             ; echo all, destr backspace, intr all
            shl     a1,a0,0,32
            stcs    a2,6,a1,2           ; set control byte
            ldi     a3,0x101
            stqs    a3,6,a1,8           ; set vector

init_timer: ldi     x9,0x3FFFFF         ; cylon
            define  timer_spec,0x000000100000002F
            ldgis   a0,timer_spec@gh
            ldca    a1,a0,timer_spec@gl
            mtcr    a1,tcr

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

echo_loop:  ldca    p0,ct,prompt@start
            call    tput
            
            mov     p0,sp
            ldi     p1,126
            add     sp,sp,0,128
            call    tget
            bez     rv,halt
            
            add     a0,p0,rv
            ldi     a1,0x0A
            stc     0,a0,1
            stc     a1,a0
            
            call    tput
            
            sub     sp,sp,0,128
            br      echo_loop

halt:       sub     sp,sp,0,32
            ldi     a0,0xcc
            shl     a1,a0,0,6
            or      a2,a1,0,4
            mtcr    a2,psq

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;       tget - get line from terminal
            ;
            ;           p0      address to store read characters
            ;           p1      max. characters to read
            ;           rv      num characters read
            ;

tget:       add     sp,sp,0,16
            stqs    lr,5,sp,-8
            
            stqs    x0,5,sp             ; loop ctr
            mov     x0,0
            
            bez     p1,tget_exit
            
tget_loop:  call    cons_wait
            sub     a0,rv,0,0x0A
            bez     a0,tget_exit
            add     a1,x0,p0
            stc     rv,a1
            inc     x0
            sub     a2,p1,x0
            bgz     a2,tget_loop
            
tget_exit:  ldqs    lr,5,sp,-8
            mov     rv,x0
            ldqs    x0,5,sp
            sub     sp,sp,0,16
            ret

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;       tput - write string to terminal
            ;
            ;           p0      address to read characters from
            ;           rv      num characters printed
            ;

tput:       add     sp,sp,0,32
            stqs    x1,5,sp,-24
            stqs    lr,5,sp,-16
            
            stqs    x0,5,sp,-8          ; index
            mov     x0,p0
            stqs    p0,5,sp
            
tput_loop:  ldc     x1,x0
            bez     x1,tput_exit
            mov     p0,x1
            call    cons_prt
            inc     x0
            br      tput_loop
            
tput_exit:  ldqs    lr,5,sp,-16
            ldqs    a0,5,sp
            ldqs    x0,5,sp,-8
            sub     rv,x0,a0
            ldqs    x1,5,sp,-24
            sub     sp,sp,0,32
            ret

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;       get_bit - get bit from bitmap
            ;
            ;           p0      address of bitmap
            ;           p1      index of bit
            ;           rv      value of bit
            ;

get_bit:    shl     a0,p1,0,-3
            add     a1,a0,p0            ; which byte to read
            ldc     a2,a1               ; get byte
            and     a3,p1,0,7
            sub     a0,0,a3             ; shift amount
            shl     a1,a2,a0
            and     rv,a1,0,1           ; get bit
            ret

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ;
            ;       set_bit - get bit from bitmap
            ;
            ;           p0      address of bitmap
            ;           p1      index of bit
            ;           p2      new value of bit
            ;

set_bit:    shl     a0,p1,0,-3
            add     a1,a0,p0            ; which byte to read
            ldc     a2,a1               ; get byte
            and     a3,p1,0,7
            ldi     a4,1
            shl     a0,a4,a3
            mcom    a5,a0               ; mask
            and     a6,a2,a5            ; clear bit
            shl     a4,p2,a3
            or      a2,a6,a4            ; set bit to desired value
            stc     a2,a1
            ret

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

cons_wait:  ldi     a5,1
            mfcr    a6,a5,psq
            mtcr    a6,psq              ; with interrupts off

cons_get:   ldi     a0,0x101
            shl     a4,a0,0,32
            ldcs    a2,6,a4,0           ; check for data
            and     a3,a2,0,128
            bez     a3,cons_do_w        ; if no data, do wait

            ldcs    rv,6,a4,1
            mov     a1,rv
            moveq   rv,a1,0,4           ; handle EOF
            moveq   rv,a1,0,-1          ; handle alternate EOF
            ret

cons_do_w:  ldi     a7,5
            mfcr    a6,psq
            mtcr    a6,a7,psq           ; wait state with interrupts
            br      cons_get

cons_prt:   ldi     a0,0x101
            shl     a4,a0,0,32
cons_prt_w: ldcs    a2,6,a4,0
            and     a3,a2,0,64
            bez     a3,cons_prt_w
            stcs    p0,6,a4,3
            ret

intr:       zero    0x100

extn:       ldi     x8,4
            add     sp,sp,0,8
            stqs    x9,5,sp
            mfcr    x9,x8,aps
            mtcr    x9,aps              ; clear wait state
            ldqs    x9,5,sp
            sub     sp,sp,0,8
            rex     0                   ; assembler bug: should just be 'rex'

            zero    0x6E0

timer:      shl     x8,x9,0,63
            shl     x9,x9,0,-1
            or      x9,x8,x9

            ldgis   x8,timer_spec@gh
            ldca    x8,x8,timer_spec@gl
            mtcr    x8,tcr

            rex     0

            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

prompt:     asciz   "Echo ---> "

top_text:
